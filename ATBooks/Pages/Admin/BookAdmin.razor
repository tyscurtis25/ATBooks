@page "/admin/books"
@page "/admin"
@inherits OwningComponentBase<IBookstoreRepository>

<table class="table table-sm table-hover table-bordered">

    <thead class="admin-table-header">
        <tr>
            <th>Book ID</th>
            <th>Book Title</th>
            <th>Book Author</th>
            <th></th>
            <th></th>
            <th></th>
        </tr>
    </thead>

    <tbody>

        @if (BookData?.Count() > 0)
        {
            //List Books
            @foreach (Books b in BookData)
            {
        <tr>
            <td>@b.BookId</td>
            <td>@b.Title</td>
            <td>@b.Author</td>

            <td>
                <NavLink class="btn btn-primary-admin-details btn-sm" href="@GetDetailsUrl(b.BookId)">Details</NavLink>
            </td>
            <td>
                <NavLink class="btn btn-primary-admin-edit btn-sm" href="@GetEditUrl(b.BookId)">Edit</NavLink>
            </td>
            <td>
                <button class="btn btn-primary-admin-delete btn-sm" @onclick="@(x => RemoveBook(b))">Delete</button>
            </td>
        </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="5" class="text-center">No Books</td>
            </tr>
        }

    </tbody>

</table>

<NavLink class="btn admin-control-btn" href="/admin/books/create">Create</NavLink><br /><br />

@code {

    public IBookstoreRepository repo => Service;

    public IEnumerable<Models.Books> BookData { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await UpdateData();
    }

    public async Task UpdateData()
    {
        BookData = await repo.Books.ToListAsync();
    }

    public string GetDetailsUrl(long id) => $"/admin/books/details/{id}";
    public string GetEditUrl(long id) => $"/admin/books/edit/{id}";

    public async Task RemoveBook(Books b)
    {
        repo.DeleteBook(b);
        await UpdateData();
    }

}
